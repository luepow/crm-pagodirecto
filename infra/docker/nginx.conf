###############################################################################
# Nginx Main Configuration
#
# Simple Analogy: This is like the rulebook for our receptionist (Nginx).
# It tells them how many people they can help at once, how to keep notes
# (logs), and general office policies.
#
# Technical: Global Nginx configuration with worker processes, event handling,
# logging, and HTTP module settings. Optimized for containerized environments
# with security and performance best practices.
#
# Author: PagoDirecto Infrastructure Team
# Version: 1.0.0
###############################################################################

# Run as nginx user (non-root for security)
user nginx;

# Auto-detect number of CPU cores
# In containers, this typically matches the CPU limit
worker_processes auto;

# Error log location and level
# Levels: debug, info, notice, warn, error, crit, alert, emerg
error_log /var/log/nginx/error.log warn;

# PID file location
pid /var/run/nginx.pid;

# Maximum number of open files per worker
# Should be >= worker_connections
worker_rlimit_nofile 65535;

###############################################################################
# Events Block - Connection Processing
#
# Simple Analogy: Rules about how many customers our receptionist can handle
# at the same time and how they manage the waiting line.
#
# Technical: Event-driven architecture configuration. Uses epoll on Linux for
# efficient connection handling. Optimized for high concurrency.
###############################################################################
events {
    # Maximum simultaneous connections per worker
    # Total connections = worker_processes * worker_connections
    worker_connections 4096;

    # Use epoll for efficient connection handling (Linux)
    use epoll;

    # Accept multiple connections at once
    multi_accept on;
}

###############################################################################
# HTTP Block - Web Server Configuration
###############################################################################
http {
    ###########################################################################
    # Basic Settings
    ###########################################################################

    # MIME types
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging format
    # Includes request time, response time, and upstream response time
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    # JSON logging format (for log aggregation systems)
    log_format json escape=json '{'
        '"time":"$time_iso8601",'
        '"remote_addr":"$remote_addr",'
        '"request_method":"$request_method",'
        '"request_uri":"$request_uri",'
        '"status":$status,'
        '"body_bytes_sent":$body_bytes_sent,'
        '"request_time":$request_time,'
        '"upstream_response_time":"$upstream_response_time",'
        '"upstream_connect_time":"$upstream_connect_time",'
        '"upstream_header_time":"$upstream_header_time",'
        '"http_referer":"$http_referer",'
        '"http_user_agent":"$http_user_agent"'
    '}';

    # Access log
    access_log /var/log/nginx/access.log main;

    ###########################################################################
    # Performance Settings
    ###########################################################################

    # Optimize file transfers
    # sendfile: Use kernel's sendfile() for efficiency
    sendfile on;

    # tcp_nopush: Send headers in one packet
    tcp_nopush on;

    # tcp_nodelay: Don't buffer data-sends (disable Nagle's algorithm)
    tcp_nodelay on;

    # Timeout for keep-alive connections
    keepalive_timeout 65;

    # Timeout for client request headers
    client_header_timeout 30s;

    # Timeout for client request body
    client_body_timeout 30s;

    # Timeout for sending response to client
    send_timeout 30s;

    # Don't send nginx version in headers (security)
    server_tokens off;

    ###########################################################################
    # Buffer Settings
    ###########################################################################

    # Client request body buffer
    client_body_buffer_size 128k;
    client_max_body_size 20m;

    # Client request header buffer
    client_header_buffer_size 1k;
    large_client_header_buffers 4 8k;

    ###########################################################################
    # Gzip Compression
    #
    # Simple Analogy: Like putting files in a zip folder before sending them.
    # Makes downloads much faster because files are smaller.
    #
    # Technical: Gzip compression reduces bandwidth usage by ~70%. Configured
    # to compress text-based content with appropriate min size threshold.
    ###########################################################################

    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_min_length 1024;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/x-javascript
        application/xml
        application/xml+rss
        application/xhtml+xml
        application/atom+xml
        image/svg+xml
        font/truetype
        font/opentype
        application/vnd.ms-fontobject;

    ###########################################################################
    # Security Headers (Global)
    ###########################################################################

    # Prevent clickjacking attacks
    add_header X-Frame-Options "SAMEORIGIN" always;

    # Prevent MIME-type sniffing
    add_header X-Content-Type-Options "nosniff" always;

    # Enable XSS protection in browsers
    add_header X-XSS-Protection "1; mode=block" always;

    # Referrer policy
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    ###########################################################################
    # Rate Limiting
    #
    # Simple Analogy: Like having a speed limit on a road. Prevents any single
    # user from making too many requests too quickly.
    #
    # Technical: Token bucket rate limiting using client IP. Protects against
    # brute force attacks and API abuse.
    ###########################################################################

    # Rate limiting zones
    # Limit: 10 requests per second per IP
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;

    # Limit: 5 requests per second per IP for auth endpoints
    limit_req_zone $binary_remote_addr zone=auth_limit:10m rate=5r/s;

    # Connection limiting
    # Limit: 10 concurrent connections per IP
    limit_conn_zone $binary_remote_addr zone=conn_limit:10m;

    ###########################################################################
    # Upstream Servers
    #
    # Simple Analogy: These are the addresses of the backend workers who do
    # the actual work. The receptionist needs to know where to send requests.
    #
    # Technical: Defines backend service endpoints. Includes health checks,
    # load balancing, and failover configuration.
    ###########################################################################

    # Backend API upstream
    upstream backend_api {
        # Load balancing method: least_conn (least connections)
        # Other options: round_robin (default), ip_hash, random
        least_conn;

        # Backend servers
        server backend:8080 max_fails=3 fail_timeout=30s;

        # Keepalive connections to backend
        keepalive 32;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    ###########################################################################
    # Cache Settings
    ###########################################################################

    # Proxy cache path
    proxy_cache_path /var/cache/nginx/proxy
                     levels=1:2
                     keys_zone=api_cache:10m
                     max_size=100m
                     inactive=60m
                     use_temp_path=off;

    ###########################################################################
    # Include Virtual Host Configurations
    ###########################################################################

    include /etc/nginx/conf.d/*.conf;
}
