###############################################################################
# Multi-Stage Dockerfile for Spring Boot Backend
#
# Simple Analogy: Building a house in stages. First, we build everything in a
# construction site with all the tools (build stage). Then, we move only the
# finished house to a clean neighborhood without all the construction mess
# (runtime stage). This makes our final house much smaller and cleaner.
#
# Technical: Multi-stage build separates compilation from runtime, resulting in
# minimal production images. Build stage includes Maven and full JDK for
# compilation. Runtime stage uses JRE-only Alpine Linux for minimal footprint.
#
# Author: PagoDirecto Infrastructure Team
# Version: 1.0.0
###############################################################################

###############################################################################
# STAGE 1: Build Stage
#
# This stage compiles the Java application using Maven. It includes the full
# JDK and build tools. The result is a fat JAR containing all dependencies.
###############################################################################
FROM eclipse-temurin:21-jdk AS builder

# Metadata labels
LABEL maintainer="PagoDirecto DevOps Team <devops@pagodirecto.com>"
LABEL description="Build stage for PagoDirecto CRM/ERP Backend"
LABEL version="1.0.0"

# Build arguments
ARG MAVEN_VERSION=3.9.6
ARG MAVEN_OPTS="-Xmx1024m -XX:MaxMetaspaceSize=512m"
ARG SPRING_PROFILES_ACTIVE=production

# Set working directory
WORKDIR /build

# Install build dependencies
# - Maven for building the project
# - curl for health checks during build
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    wget \
    && rm -rf /var/lib/apt/lists/*

# Install Maven
RUN wget https://archive.apache.org/dist/maven/maven-3/${MAVEN_VERSION}/binaries/apache-maven-${MAVEN_VERSION}-bin.tar.gz && \
    tar xzf apache-maven-${MAVEN_VERSION}-bin.tar.gz && \
    mv apache-maven-${MAVEN_VERSION} /opt/maven && \
    rm apache-maven-${MAVEN_VERSION}-bin.tar.gz && \
    ln -s /opt/maven/bin/mvn /usr/bin/mvn

# Environment variables for Maven
ENV MAVEN_HOME=/opt/maven
ENV MAVEN_OPTS=${MAVEN_OPTS}

# Copy Maven wrapper and project files
# We copy these first to leverage Docker layer caching
COPY mvnw .
COPY .mvn .mvn
COPY pom.xml .

# Copy all module POMs (for multi-module project)
COPY core-domain/pom.xml core-domain/
COPY seguridad/pom.xml seguridad/
COPY clientes/pom.xml clientes/
COPY oportunidades/pom.xml oportunidades/
COPY tareas/pom.xml tareas/
COPY productos/pom.xml productos/
COPY ventas/pom.xml ventas/
COPY reportes/pom.xml reportes/
COPY application/pom.xml application/

# Download dependencies
# This layer is cached unless pom.xml files change
RUN mvn dependency:go-offline -B

# Copy source code
COPY core-domain/src core-domain/src
COPY seguridad/src seguridad/src
COPY clientes/src clientes/src
COPY oportunidades/src oportunidades/src
COPY tareas/src tareas/src
COPY productos/src productos/src
COPY ventas/src ventas/src
COPY reportes/src reportes/src
COPY application/src application/src

# Build the application
# -DskipTests: Skip tests in Docker build (run separately in CI/CD)
# -B: Batch mode (non-interactive)
# -P production: Activate production profile
RUN mvn clean package -DskipTests -B -P ${SPRING_PROFILES_ACTIVE}

# Extract JAR layers for better caching in runtime
# Spring Boot supports layered JARs for efficient Docker builds
WORKDIR /build/application/target
RUN java -Djarmode=layertools -jar application-*.jar extract

###############################################################################
# STAGE 2: Runtime Stage
#
# This stage creates the minimal production image with only the JRE and
# application JAR. Security hardening includes non-root user, minimal base
# image, and security options.
###############################################################################
FROM eclipse-temurin:21-jre AS production

# Metadata labels
LABEL maintainer="PagoDirecto DevOps Team <devops@pagodirecto.com>"
LABEL description="Production runtime for PagoDirecto CRM/ERP Backend"
LABEL version="1.0.0"
LABEL org.opencontainers.image.source="https://github.com/pagodirecto/crm-erp"
LABEL org.opencontainers.image.licenses="Proprietary"

# Install runtime dependencies
# - curl: For health checks
# - tzdata: Timezone support
# - ca-certificates: SSL/TLS certificates
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    tzdata \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/* \
    && groupadd -r appgroup \
    && useradd -r -g appgroup -d /app -s /sbin/nologin appuser

# Set timezone to UTC
ENV TZ=UTC
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Set working directory
WORKDIR /app

# Copy application layers from builder
# Spring Boot layered JARs allow better caching:
# - dependencies: rarely change
# - spring-boot-loader: rarely change
# - snapshot-dependencies: occasionally change
# - application: frequently change
COPY --from=builder --chown=appuser:appgroup /build/application/target/dependencies/ ./
COPY --from=builder --chown=appuser:appgroup /build/application/target/spring-boot-loader/ ./
COPY --from=builder --chown=appuser:appgroup /build/application/target/snapshot-dependencies/ ./
COPY --from=builder --chown=appuser:appgroup /build/application/target/application/ ./

# Create directories for logs and temporary files
RUN mkdir -p /app/logs /app/tmp && \
    chown -R appuser:appgroup /app

# Switch to non-root user
USER appuser

# Environment variables
ENV JAVA_OPTS="-Xms512m -Xmx1024m -XX:+UseG1GC -XX:MaxGCPauseMillis=200" \
    SPRING_PROFILES_ACTIVE=production \
    SERVER_PORT=8080

# Expose application port
EXPOSE 8080

# Health check
# Verifies that Spring Boot Actuator health endpoint responds
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8080/api/actuator/health || exit 1

# Entry point
# Uses Spring Boot's layered JAR launcher
ENTRYPOINT ["java", \
    "-Djava.security.egd=file:/dev/./urandom", \
    "-Duser.timezone=UTC", \
    "org.springframework.boot.loader.launch.JarLauncher"]

###############################################################################
# STAGE 3: Development Stage (Optional)
#
# This stage is used for development with hot-reload capabilities.
# Includes development tools and runs with Spring Boot DevTools.
###############################################################################
FROM eclipse-temurin:21-jdk AS development

LABEL description="Development runtime with hot-reload support"

# Install development dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    wget \
    bash \
    git \
    && rm -rf /var/lib/apt/lists/*

# Install Maven
ARG MAVEN_VERSION=3.9.6
RUN wget https://archive.apache.org/dist/maven/maven-3/${MAVEN_VERSION}/binaries/apache-maven-${MAVEN_VERSION}-bin.tar.gz && \
    tar xzf apache-maven-${MAVEN_VERSION}-bin.tar.gz && \
    mv apache-maven-${MAVEN_VERSION} /opt/maven && \
    rm apache-maven-${MAVEN_VERSION}-bin.tar.gz && \
    ln -s /opt/maven/bin/mvn /usr/bin/mvn

ENV MAVEN_HOME=/opt/maven

# Create non-root user and prepare directories
RUN groupadd -r appgroup && \
    useradd -r -g appgroup -d /app -s /bin/bash appuser && \
    mkdir -p /app/.m2 && \
    chown -R appuser:appgroup /app

WORKDIR /app

# Switch to non-root user
USER appuser

# Environment variables for development
ENV SPRING_PROFILES_ACTIVE=development \
    SPRING_DEVTOOLS_RESTART_ENABLED=true \
    SPRING_DEVTOOLS_LIVERELOAD_ENABLED=true

EXPOSE 8080 35729

# Entry point for development
# First install all modules to local Maven repo, then run Spring Boot
# This ensures all module dependencies are available
CMD ["sh", "-c", "mvn clean install -DskipTests -q && cd application && mvn spring-boot:run"]

###############################################################################
# USAGE EXAMPLES
#
# Build production image:
#   docker build -t pagodirecto/crm-backend:latest \
#     --target production \
#     -f Dockerfile.backend \
#     ../../backend
#
# Build development image:
#   docker build -t pagodirecto/crm-backend:dev \
#     --target development \
#     -f Dockerfile.backend \
#     ../../backend
#
# Run production container:
#   docker run -d \
#     --name pagodirecto-backend \
#     -p 8080:8080 \
#     -e SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/pagodirecto_crm \
#     -e SPRING_DATASOURCE_USERNAME=pagodirecto \
#     -e SPRING_DATASOURCE_PASSWORD=secure_password \
#     pagodirecto/crm-backend:latest
#
# Run development container with volume mount:
#   docker run -d \
#     --name pagodirecto-backend-dev \
#     -p 8080:8080 \
#     -v $(pwd)/backend:/app \
#     -e SPRING_PROFILES_ACTIVE=development \
#     pagodirecto/crm-backend:dev
#
###############################################################################

###############################################################################
# SECURITY BEST PRACTICES IMPLEMENTED
#
# 1. Non-root user: Application runs as 'appuser' (UID > 1000)
# 2. Minimal base image: Alpine Linux reduces attack surface
# 3. Multi-stage build: Build tools not included in production image
# 4. Layer caching: Optimized for fast rebuilds
# 5. Health checks: Container orchestration can detect unhealthy containers
# 6. No secrets in image: Credentials passed via environment variables
# 7. Explicit package versions: Reproducible builds
# 8. Security updates: Use latest Alpine base with security patches
#
###############################################################################

###############################################################################
# OPTIMIZATION TECHNIQUES
#
# 1. Layer Caching: Dependencies downloaded before source code copy
# 2. Layered JARs: Spring Boot extracts JAR into layers for better caching
# 3. .dockerignore: Excludes unnecessary files from build context
# 4. Alpine Linux: Minimal base image (~5MB vs ~200MB for full Linux)
# 5. JRE vs JDK: Runtime uses JRE-only (no compilation tools)
# 6. Build arguments: Configurable Maven options and profiles
#
# Expected image sizes:
# - Builder stage: ~400MB (includes JDK and Maven)
# - Production stage: ~180MB (JRE + application)
# - Development stage: ~450MB (includes development tools)
#
###############################################################################
