###############################################################################
# Nginx Frontend Server Configuration
#
# Simple Analogy: This tells the receptionist (Nginx) how to handle visitors.
# Some visitors want to see the website (frontend), others want to use the
# business services (API). The receptionist directs each to the right place.
#
# Technical: Server block configuration for serving React SPA and proxying
# API requests to backend. Includes SPA routing, security headers, CORS,
# caching strategies, and health check endpoints.
#
# Author: PagoDirecto Infrastructure Team
# Version: 1.0.0
###############################################################################

server {
    ###########################################################################
    # Server Basic Configuration
    ###########################################################################

    # Listen on port 80 (HTTP)
    listen 80;
    listen [::]:80;

    # Server name (change for production)
    server_name localhost _;

    # Document root
    root /usr/share/nginx/html;
    index index.html;

    # Charset
    charset utf-8;

    ###########################################################################
    # Logging
    ###########################################################################

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    ###########################################################################
    # Security Headers
    #
    # Simple Analogy: Like security badges and rules at the building entrance.
    # They protect against various types of attacks and unauthorized access.
    #
    # Technical: Defense-in-depth security headers implementing OWASP
    # recommendations. Protects against XSS, clickjacking, MIME sniffing,
    # and other common web vulnerabilities.
    ###########################################################################

    # Content Security Policy
    # Restricts resources that can be loaded
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' http://localhost:8080 http://backend:8080; frame-ancestors 'self';" always;

    # Prevent clickjacking
    add_header X-Frame-Options "SAMEORIGIN" always;

    # Prevent MIME-type sniffing
    add_header X-Content-Type-Options "nosniff" always;

    # XSS Protection (legacy, but still useful)
    add_header X-XSS-Protection "1; mode=block" always;

    # Referrer policy
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # Permissions policy (formerly Feature-Policy)
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;

    ###########################################################################
    # CORS Configuration
    #
    # Simple Analogy: Like passport control. Decides which other websites are
    # allowed to talk to our website.
    #
    # Technical: Cross-Origin Resource Sharing headers. Required for frontend
    # to communicate with backend API when served from different origins.
    ###########################################################################

    # Handle preflight OPTIONS requests
    if ($request_method = 'OPTIONS') {
        add_header 'Access-Control-Allow-Origin' '$http_origin' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, PATCH, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
        add_header 'Access-Control-Max-Age' 1728000 always;
        add_header 'Content-Type' 'text/plain; charset=utf-8' always;
        add_header 'Content-Length' 0 always;
        return 204;
    }

    ###########################################################################
    # Health Check Endpoint
    ###########################################################################

    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    ###########################################################################
    # API Proxy Configuration
    #
    # Simple Analogy: Requests for business services (API) are forwarded to
    # the backend office where the real work happens. The receptionist acts
    # as a messenger.
    #
    # Technical: Reverse proxy to backend API with connection pooling,
    # timeout configuration, and header forwarding. Includes rate limiting
    # to prevent API abuse.
    ###########################################################################

    location /api {
        # Apply rate limiting
        limit_req zone=api_limit burst=20 nodelay;
        limit_conn conn_limit 10;

        # Proxy to backend
        proxy_pass http://backend:8080;

        # Proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;

        # Timeout settings
        proxy_connect_timeout 30s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;

        # Buffer settings
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        proxy_busy_buffers_size 8k;

        # HTTP version and connection
        proxy_http_version 1.1;
        proxy_set_header Connection "";

        # Disable proxy redirect
        proxy_redirect off;

        # CORS headers for API responses
        add_header 'Access-Control-Allow-Origin' '$http_origin' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, PATCH, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range,Authorization' always;
    }

    # Special rate limiting for authentication endpoints
    location ~ ^/api/(auth|login|register) {
        limit_req zone=auth_limit burst=5 nodelay;
        limit_conn conn_limit 5;

        # Proxy configuration (same as above)
        proxy_pass http://backend:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_http_version 1.1;
        proxy_set_header Connection "";

        # CORS headers
        add_header 'Access-Control-Allow-Origin' '$http_origin' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        add_header 'Access-Control-Allow-Methods' 'POST, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Content-Type,Authorization' always;
    }

    ###########################################################################
    # Static Assets with Caching
    #
    # Simple Analogy: Some files don't change often (like company logos).
    # We tell browsers "you can remember this file for a long time instead
    # of asking for it again every time."
    #
    # Technical: Aggressive caching for immutable static assets with
    # fingerprinted filenames (hashed by Vite). Reduces server load and
    # improves client performance.
    ###########################################################################

    # Cache static assets with hash in filename (Vite output)
    # Example: app-a1b2c3d4.js
    location ~* ^.+\.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|otf)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        access_log off;

        # CORS for fonts
        if ($request_filename ~* \.(woff|woff2|ttf|eot|otf)$) {
            add_header 'Access-Control-Allow-Origin' '*';
        }

        # Try to serve file, fallback to index.html
        try_files $uri =404;
    }

    ###########################################################################
    # SPA Routing
    #
    # Simple Analogy: If someone asks for a page that doesn't exist as a file,
    # we give them the main app and let the app figure out what to show.
    #
    # Technical: All non-API, non-file requests routed to index.html for
    # client-side React Router handling. Essential for SPA applications with
    # browser-based routing.
    ###########################################################################

    location / {
        # Try to serve file, then directory, finally fallback to index.html
        try_files $uri $uri/ /index.html;

        # Cache control for HTML files (no caching for app shell)
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
    }

    # Explicitly handle index.html (no caching)
    location = /index.html {
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
        try_files $uri =404;
    }

    ###########################################################################
    # Additional Configuration
    ###########################################################################

    # Deny access to hidden files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Deny access to backup files
    location ~ ~$ {
        deny all;
        access_log off;
        log_not_found off;
    }

    # robots.txt
    location = /robots.txt {
        access_log off;
        log_not_found off;
    }

    # favicon.ico
    location = /favicon.ico {
        access_log off;
        log_not_found off;
    }

    ###########################################################################
    # Error Pages
    ###########################################################################

    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;

    location = /50x.html {
        root /usr/share/nginx/html;
        internal;
    }
}
