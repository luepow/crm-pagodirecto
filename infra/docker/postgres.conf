###############################################################################
# PostgreSQL Custom Configuration
#
# Simple Analogy: This file is like tuning a car engine for better performance.
# We adjust various settings to make the database run faster and handle more
# work efficiently.
#
# Technical: Production-tuned PostgreSQL configuration. Settings optimized for
# OLTP workloads with moderate concurrency. Adjust based on available hardware
# and actual workload patterns.
#
# Hardware assumptions:
# - 4 CPU cores
# - 8GB RAM (2GB allocated to PostgreSQL)
# - SSD storage
#
# Author: PagoDirecto Infrastructure Team
# Version: 1.0.0
###############################################################################

###############################################################################
# CONNECTIONS AND AUTHENTICATION
###############################################################################

# Listen on all interfaces (required for Docker networking)
listen_addresses = '*'

# Maximum number of concurrent connections
# Rule of thumb: (2 * CPU cores) + effective_spindle_count
max_connections = 100

# Maximum connections reserved for superuser
superuser_reserved_connections = 3

###############################################################################
# RESOURCE USAGE - MEMORY
#
# Simple Analogy: How much RAM we give to the database to remember things.
# More memory means faster lookups and less reading from disk.
#
# Technical: Memory allocation for buffer cache, working memory, and
# maintenance operations. Tuned for 2GB RAM allocation.
###############################################################################

# Shared buffers: PostgreSQL shared memory cache
# Recommendation: 25% of total RAM (for dedicated database server)
# For containers: Be conservative, 25-40% of container memory limit
shared_buffers = 512MB

# Effective cache size: Total memory available for caching
# Recommendation: 50-75% of total RAM
# Used by query planner for cost estimation
effective_cache_size = 1536MB

# Work memory: Memory for sort and hash operations (per operation)
# Recommendation: (Total RAM * 0.25) / max_connections
# Too high = risk of OOM, too low = disk-based sorts
work_mem = 16MB

# Maintenance work memory: Memory for VACUUM, CREATE INDEX, etc.
# Recommendation: 5-10% of total RAM
maintenance_work_mem = 128MB

# Autovacuum work memory
# Set to maintenance_work_mem if not specified
autovacuum_work_mem = 128MB

# Huge pages: Improve memory management (requires OS configuration)
# Options: try, on, off
huge_pages = try

###############################################################################
# RESOURCE USAGE - DISK
###############################################################################

# Temporary file limit: Max disk space for temporary files (per process)
# Set to prevent runaway queries from filling disk
temp_file_limit = 1GB

###############################################################################
# WRITE AHEAD LOG (WAL)
#
# Simple Analogy: Like a diary that records all changes. If something crashes,
# we can read the diary to recover recent changes.
#
# Technical: WAL settings affect durability, performance, and replication.
# Tuned for balance between safety and performance.
###############################################################################

# WAL level: Amount of information written to WAL
# Options: minimal, replica, logical
# 'replica' enables streaming replication and point-in-time recovery
wal_level = replica

# Full page writes: Write entire pages on first modification after checkpoint
# Protects against partial page writes during crash
full_page_writes = on

# WAL sync method: How to force WAL to disk
# Options: fsync, fdatasync, open_sync, open_datasync
# fsync is safest on most platforms
wal_sync_method = fdatasync

# Commit delay: Delay between commits (microseconds)
# Allows grouping multiple commits for better throughput
commit_delay = 0

# Commit siblings: Minimum concurrent transactions to use commit_delay
commit_siblings = 5

###############################################################################
# CHECKPOINTS
#
# Simple Analogy: Like creating save points in a video game. The database
# periodically saves everything to ensure no data is lost.
#
# Technical: Checkpoints write all dirty buffers to disk. Frequent checkpoints
# increase safety but hurt performance. Settings tuned for balance.
###############################################################################

# Checkpoint completion target: Spread checkpoint I/O over this fraction of interval
# Range: 0.0 - 1.0. Higher values = more spread out, less I/O spikes
checkpoint_completion_target = 0.9

# Maximum WAL size before checkpoint: Triggers checkpoint when exceeded
max_wal_size = 2GB

# Minimum WAL size: Recycle WAL files up to this size
min_wal_size = 1GB

# Checkpoint timeout: Maximum time between checkpoints
checkpoint_timeout = 15min

# Checkpoint warning: Log if checkpoints happen more frequently than this
checkpoint_warning = 30s

###############################################################################
# ARCHIVING AND REPLICATION
###############################################################################

# Archive mode: Enable WAL archiving for PITR and replication
archive_mode = off  # Enable for production with backup strategy

# Archive command: Command to copy WAL files to archive
# archive_command = 'test ! -f /backups/archive/%f && cp %p /backups/archive/%f'

# Maximum replication slots
max_replication_slots = 10

# Maximum WAL senders (for replication)
max_wal_senders = 10

###############################################################################
# QUERY TUNING
###############################################################################

# Random page cost: Relative cost of random I/O
# Default: 4.0 (for HDD)
# SSD: 1.1 - 1.5
random_page_cost = 1.1

# Effective I/O concurrency: Number of concurrent disk I/O operations
# SSD: 200-300, HDD: 2-4
effective_io_concurrency = 200

# Default statistics target: Sampling for query planner
# Higher = better estimates, but slower ANALYZE
# Range: 1-10000, Default: 100
default_statistics_target = 100

###############################################################################
# LOGGING
#
# Simple Analogy: Like a security camera system. We record what's happening
# so we can review it later if there are problems.
#
# Technical: Comprehensive logging for debugging and auditing. Configured to
# balance detail with performance impact.
###############################################################################

# Logging destination: Where to log
# Options: stderr, csvlog, syslog, eventlog (Windows)
logging_collector = on
log_destination = 'stderr'

# Log directory and filename
log_directory = 'log'
log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'

# Log file rotation
log_truncate_on_rotation = off
log_rotation_age = 1d
log_rotation_size = 100MB

# What to log
log_min_messages = warning
log_min_error_statement = error
log_min_duration_statement = 1000  # Log queries taking > 1 second

# Statement logging
log_statement = 'mod'  # Log all DDL and DML (none, ddl, mod, all)
log_duration = off
log_line_prefix = '%m [%p] %q%u@%d '

# Connection logging
log_connections = on
log_disconnections = on
log_hostname = off

# Lock and deadlock logging
log_lock_waits = on
deadlock_timeout = 1s

# Temp file logging
log_temp_files = 0  # Log all temp file creation

###############################################################################
# STATISTICS
###############################################################################

# Track activity: Enable activity tracking
track_activities = on
track_counts = on
track_io_timing = on
track_functions = all

# Statistics targets
# stats_temp_directory = '/var/run/postgresql'  # Removed in PostgreSQL 15+

###############################################################################
# AUTOVACUUM
#
# Simple Analogy: Like an automatic cleaning service. It regularly cleans up
# old, unused data to keep the database running smoothly.
#
# Technical: Autovacuum reclaims storage and updates statistics. Critical for
# PostgreSQL performance. Settings tuned for OLTP workloads.
###############################################################################

# Enable autovacuum
autovacuum = on

# Time between autovacuum runs
autovacuum_naptime = 1min

# Minimum number of updated/deleted tuples before vacuum
autovacuum_vacuum_threshold = 50
autovacuum_analyze_threshold = 50

# Fraction of table size to add to thresholds
autovacuum_vacuum_scale_factor = 0.1
autovacuum_analyze_scale_factor = 0.05

# Maximum number of autovacuum workers
autovacuum_max_workers = 3

# Vacuum cost delay (throttling to reduce I/O impact)
autovacuum_vacuum_cost_delay = 2ms
autovacuum_vacuum_cost_limit = 200

###############################################################################
# CLIENT CONNECTION DEFAULTS
###############################################################################

# Timezone
timezone = 'UTC'

# Locale
lc_messages = 'en_US.utf8'
lc_monetary = 'en_US.utf8'
lc_numeric = 'en_US.utf8'
lc_time = 'en_US.utf8'

# Default text search configuration
default_text_search_config = 'pg_catalog.english'

# Statement timeout: Abort queries taking longer than this
# 0 = disabled. Set to prevent runaway queries
statement_timeout = 0  # Set to 30s-60s in production

# Lock timeout: Abort when cannot acquire lock within this time
lock_timeout = 0  # Set to 10s-30s in production

# Idle in transaction timeout: Abort idle transactions
idle_in_transaction_session_timeout = 0  # Set to 5min in production

###############################################################################
# SHARED PRELOAD LIBRARIES
#
# Technical: Extensions that must be loaded at server start. Includes
# pg_stat_statements for query performance monitoring.
###############################################################################

shared_preload_libraries = 'pg_stat_statements'

# pg_stat_statements configuration
pg_stat_statements.max = 10000
pg_stat_statements.track = all

###############################################################################
# SECURITY
###############################################################################

# Password encryption
password_encryption = scram-sha-256

# SSL (configure when using SSL)
ssl = off
# ssl_cert_file = '/etc/ssl/certs/server.crt'
# ssl_key_file = '/etc/ssl/private/server.key'
# ssl_ca_file = '/etc/ssl/certs/ca.crt'

###############################################################################
# NOTES FOR PRODUCTION TUNING
#
# 1. Hardware-specific tuning:
#    - Adjust shared_buffers based on total RAM (25-40% of container limit)
#    - Adjust work_mem based on max_connections and query complexity
#    - Adjust effective_io_concurrency based on storage (SSD vs HDD vs NVMe)
#
# 2. Workload-specific tuning:
#    - OLTP: Lower work_mem, higher max_connections
#    - OLAP: Higher work_mem, lower max_connections, parallel query settings
#    - Mixed: Balance between the two
#
# 3. Monitoring:
#    - Use pg_stat_statements to identify slow queries
#    - Monitor cache hit ratio (target > 99%)
#    - Monitor autovacuum performance
#    - Track connection pool utilization
#
# 4. Testing:
#    - Always test configuration changes under load
#    - Use pg_bench for benchmarking
#    - Monitor with tools like pg_top, pg_activity
#
# 5. Further reading:
#    - https://pgtune.leopard.in.ua/ (configuration generator)
#    - https://www.postgresql.org/docs/16/runtime-config.html
#    - https://wiki.postgresql.org/wiki/Tuning_Your_PostgreSQL_Server
#
###############################################################################
