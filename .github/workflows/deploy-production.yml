name: Deploy to Production

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build JAR
        working-directory: backend
        run: mvn clean package -DskipTests

      - name: Upload JAR
        uses: actions/upload-artifact@v4
        with:
          name: backend-jar
          path: backend/application/target/*.jar
          retention-days: 7

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9.7.0

      - name: Install dependencies
        working-directory: frontend
        run: pnpm install --frozen-lockfile

      - name: Build frontend
        working-directory: frontend/apps/web
        run: pnpm run build

      - name: Upload frontend build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/apps/web/dist/
          retention-days: 7

  deploy-backend:
    name: Deploy Backend to Server
    runs-on: ubuntu-latest
    needs: build-backend
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-jar
          path: ./

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Ensure backend directory exists
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} \
          "mkdir -p ${{ secrets.REMOTE_BACKEND_PATH }}/logs"

      - name: Upload PM2 ecosystem config
        run: |
          scp -o StrictHostKeyChecking=no backend/ecosystem.config.js \
          ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:${{ secrets.REMOTE_BACKEND_PATH }}/ecosystem.config.js

      - name: Create backup on server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} \
          "cd ${{ secrets.REMOTE_BACKEND_PATH }} && \
           [ -f application.jar ] && \
           mv application.jar application.jar.backup.$(date +%Y%m%d_%H%M%S) || true"

      - name: Upload JAR to server
        run: |
          scp -o StrictHostKeyChecking=no *.jar \
          ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:${{ secrets.REMOTE_BACKEND_PATH }}/application.jar

      - name: Restart backend service
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} \
          "cd ${{ secrets.REMOTE_BACKEND_PATH }} && \
           pm2 restart crm-backend || pm2 start ecosystem.config.js && \
           pm2 save && \
           sleep 10 && \
           pm2 list"

      - name: Health check
        run: |
          sleep 15
          curl -f http://${{ secrets.REMOTE_HOST }}:8082/api/actuator/health || exit 1

  deploy-frontend:
    name: Deploy Frontend to Server
    runs-on: ubuntu-latest
    needs: build-frontend
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download frontend artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: dist/

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Ensure frontend directory exists
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} \
          "mkdir -p ${{ secrets.REMOTE_FRONTEND_PATH }}"

      - name: Create backup on server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} \
          "[ -d ${{ secrets.REMOTE_FRONTEND_PATH }} ] && \
           cp -r ${{ secrets.REMOTE_FRONTEND_PATH }} ${{ secrets.REMOTE_FRONTEND_PATH }}.backup.$(date +%Y%m%d_%H%M%S) || true"

      - name: Upload frontend to server
        run: |
          rsync -avz --delete -e "ssh -o StrictHostKeyChecking=no" \
          dist/ \
          ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:${{ secrets.REMOTE_FRONTEND_PATH }}/

      - name: Reload Nginx
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} \
          "nginx -t && nginx -s reload || systemctl reload nginx"

      - name: Health check
        run: |
          sleep 5
          curl -f http://${{ secrets.REMOTE_HOST }}/ || exit 1

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: always()

    steps:
      - name: Deployment successful
        if: needs.deploy-backend.result == 'success' && needs.deploy-frontend.result == 'success'
        run: |
          echo "✅ Deployment completed successfully!"
          echo "Backend: http://${{ secrets.REMOTE_HOST }}:8082/api"
          echo "Frontend: http://${{ secrets.REMOTE_HOST }}"

      - name: Deployment failed
        if: needs.deploy-backend.result == 'failure' || needs.deploy-frontend.result == 'failure'
        run: |
          echo "❌ Deployment failed!"
          exit 1
